generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  password     String?
  email        String     @unique
  googleId     String?    @unique
  auth0Id      String?    @unique
  role         Role       @default(USER)
  state        State      @default(APPROVED)
  lastLoginAt  DateTime?
  lastLoginIp  String? // Add this field to track login IP
  answers      Answer[]
  questions    Question[]
  mentionedIn  Reply[]    @relation("MentionedUser")
  replies      Reply[]
  votes        Vote[]
  twoFASecret  String?
  twoFAEnabled Boolean
  documents    Document[]
  Report       Report[]

  @@index([email])
  @@index([googleId])
  @@index([auth0Id])
}

model Question {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  createdAt DateTime   @default(now())
  downvotes Int        @default(0)
  tags      String
  upvotes   Int        @default(0)
  answers   Answer[]
  user      User       @relation(fields: [userId], references: [id])
  votes     Vote[]
  documents Document[] // Link questions to documents
  Report    Report[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  questionId Int
  userId     Int
  createdAt  DateTime @default(now())
  downvotes  Int      @default(0)
  upvotes    Int      @default(0)
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  replies    Reply[]
  votes      Vote[]
  Report     Report[]
}

model Vote {
  id         Int       @id @default(autoincrement())
  userId     Int
  questionId Int?
  voteType   String
  answerId   Int?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Reply {
  id              Int      @id @default(autoincrement())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  answerId        Int
  mentionedUserId Int?
  answer          Answer   @relation(fields: [answerId], references: [id])
  mentionedUser   User?    @relation("MentionedUser", fields: [mentionedUserId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Document {
  id            Int       @id @default(autoincrement())
  filename      String
  mimeType      String
  size          Int
  firebaseUrl   String // URL to access the file in Firebase Storage
  firebasePath  String // Path in Firebase Storage (e.g., "documents/userId/filename")
  hash          String // SHA-256 hash of the original document
  hmac          String // HMAC for integrity verification
  hmacKey       String // Key used for HMAC
  signature     String // Digital signature (OpenSSL)
  encryptionKey String // AES encryption key (encrypted with user's public key)
  encryptionIv  String // AES initialization vector
  authTag       String // AES-GCM authentication tag
  publicKey     String // Public key in PEM format for signature verification
  createdAt     DateTime  @default(now())
  userId        Int
  questionId    Int? // Optional link to a question
  user          User      @relation(fields: [userId], references: [id])
  question      Question? @relation(fields: [questionId], references: [id])

  @@index([userId])
  @@index([questionId])
}

model Report {
  id        Int        @id @default(autoincrement())
  reason    flagReason
  createdAt DateTime   @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answerId Int?
  answer   Answer? @relation(fields: [answerId], references: [id], onDelete: Cascade)
  state    State @default(PENDING)
}

enum flagReason {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum State {
  PENDING
  APPROVED
  REJECTED
}
