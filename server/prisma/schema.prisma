generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique
  password    String?
  email       String     @unique
  googleId    String?    @unique
  auth0Id     String?    @unique
  role        Role       @default(USER)
  state       State      @default(APPROVED)
  answers     Answer[]
  questions   Question[]
  mentionedIn Reply[]    @relation("MentionedUser")
  replies     Reply[]
  votes       Vote[]
  twoFASecret String?
  twoFAEnabled Boolean

  @@index([email])
  @@index([googleId])
  @@index([auth0Id])
}

model Question {
  id               Int      @id @default(autoincrement())
  title            String
  content          String
  userId           Int
  createdAt        DateTime @default(now())
  downvotes        Int      @default(0)
  tags             String
  upvotes          Int      @default(0)
  documentPath     String?
  originalFilename String?
  filePublicId     String?
  answers          Answer[]
  user             User     @relation(fields: [userId], references: [id])
  votes            Vote[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  questionId Int
  userId     Int
  createdAt  DateTime @default(now())
  downvotes  Int      @default(0)
  upvotes    Int      @default(0)
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  replies    Reply[]
  votes      Vote[]
}

model Vote {
  id         Int       @id @default(autoincrement())
  userId     Int
  questionId Int?
  voteType   String
  answerId   Int?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Reply {
  id              Int      @id @default(autoincrement())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  answerId        Int
  mentionedUserId Int?
  answer          Answer   @relation(fields: [answerId], references: [id])
  mentionedUser   User?    @relation("MentionedUser", fields: [mentionedUserId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum State {
  PENDING
  APPROVED
  REJECTED
}
