generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum State {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique
  email       String     @unique
  password    String?
  googleId    String?    @unique
  auth0Id     String?    @unique // Added for Auth0 integration
  role        Role       @default(USER)
  state       State      @default(APPROVED)
  questions   Question[]
  answers     Answer[]
  votes       Vote[]
  replies     Reply[]
  mentionedIn Reply[]    @relation("MentionedUser")

  @@index([email])
  @@index([googleId])
  @@index([auth0Id])
}

model Question {
  id               Int      @id @default(autoincrement())
  title            String
  content          String
  upvotes          Int      @default(0)
  downvotes        Int      @default(0)
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  answers          Answer[]
  votes            Vote[]
  createdAt        DateTime @default(now())
  tags             String   // Store tags as a JSON string, e.g., '["tag1", "tag2"]'
  documentPath     String?  // Path to uploaded document (optional)
  originalFilename String?  // Original filename of the uploaded document (optional)
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  userId     Int
  questionId Int
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  votes      Vote[]
  replies    Reply[]
  createdAt  DateTime @default(now())
}

model Vote {
  id         Int       @id @default(autoincrement())
  userId     Int
  questionId Int? // Nullable, used for question votes
  answerId   Int? // Nullable, used for answer votes
  voteType   String // "upvote" or "downvote"
  user       User      @relation(fields: [userId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  answer     Answer?   @relation(fields: [answerId], references: [id])
}

model Reply {
  id              Int      @id @default(autoincrement())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  answerId        Int
  mentionedUserId Int?

  user          User   @relation(fields: [userId], references: [id])
  answer        Answer @relation(fields: [answerId], references: [id])
  mentionedUser User?  @relation("MentionedUser", fields: [mentionedUserId], references: [id])
}
